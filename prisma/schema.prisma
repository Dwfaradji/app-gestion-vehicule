// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // ‚úÖ laisse Prisma g√©n√©rer l√† o√π il s‚Äôattend √† le trouver
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  name             String?
  fonction         String?
  passwordHash     String
  role             Role       @default(USER)
  status           UserStatus @default(PENDING)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

model Vehicule {
  id                Int             @id @default(autoincrement())
  type              String
  constructeur      String
  modele            String
  km                Int
  annee             Int
  energie           String
  prixAchat         Int?
  dateEntretien     DateTime?
  statut            String?
  prochaineRevision DateTime?
  immat             String          @unique
  ctValidite        DateTime?
  vim               String?         @unique
  places            Int?
  motorisation      String?
  chevauxFiscaux    Int?
  rdv               DateTime?
  depense           Depense[]
  trajets           Trajet[]
  conducteurId      Int?
  conducteur        Conducteur?     @relation(fields: [conducteurId], references: [id], name: "VehiculeConducteur")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  Planification     Planification[]
}

model Conducteur {
  id            Int             @id @default(autoincrement())
  nom           String
  prenom        String
  code          String          @unique
  vehicules     Vehicule[]      @relation("VehiculeConducteur")
  trajets       Trajet[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Planification Planification[]
}

model Depense {
  id          Int      @id @default(autoincrement())
  vehiculeId  Int
  itemId      Int? // üîπ r√©f√©rence l'ID de l‚Äôintervention ou pi√®ce
  categorie   String
  montant     Int
  note        String?
  reparation  String?
  km          Int
  date        DateTime
  intervenant String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vehicule Vehicule @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
}

enum DepenseType {
  MECANIQUE
  CARROSSERIE
  REVISION
}

model EntretienParam {
  id            Int      @id @default(autoincrement())
  type          String
  itemId        Int? // üîπ r√©f√©rence l'ID de l‚Äôintervention ou pi√®ce
  category      String
  subCategory   String?
  seuilKm       Int
  alertKmBefore Int?
  description   String?
  applicableTo  String? // JSON ou CSV de types de v√©hicules
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Email {
  id        Int      @id @default(autoincrement())
  adresse   String   @unique
  createdAt DateTime @default(now())
}

model Notification {
  id        Int       @id @default(autoincrement())
  type      String
  message   String
  vehicleId Int
  itemId    Int? // üîπ r√©f√©rence l'ID de l‚Äôintervention ou pi√®ce
  date      DateTime?
  km        Int?
  seen      Boolean   @default(false)
  priority  String
  createdAt DateTime  @default(now())

  @@unique([vehicleId, type, itemId]) // üîπ emp√™che doublons par intervention/pi√®ce
  @@index([vehicleId])
}

model Trajet {
  id              Int  @id @default(autoincrement())
  vehiculeId      Int
  conducteurId    Int // <= dois etre obligatoire
  planificationId Int? // <-- ajouter ici si tu veux le lien

  kmDepart     Int?
  kmArrivee    Int?
  heureDepart  String?
  heureArrivee String?
  destination  String?
  carburant    Int
  anomalies    Json?
  createdAt    DateTime @default(now())

  vehicule   Vehicule    @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
  conducteur Conducteur? @relation(fields: [conducteurId], references: [id], onDelete: Cascade)

  @@unique([vehiculeId, conducteurId, kmArrivee])
}

model Planification {
  id           Int        @id @default(autoincrement())
  vehiculeId   Int
  conducteurId Int
  startDate    DateTime
  endDate      DateTime
  type         PlanifType @default(HEBDO)
  note         String?    @db.Text
  nbreTranches Int        @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicule   Vehicule   @relation(fields: [vehiculeId], references: [id])
  conducteur Conducteur @relation(fields: [conducteurId], references: [id])

  @@index([vehiculeId])
  @@index([conducteurId])
  @@index([startDate, endDate])
}

enum PlanifType {
  JOUR
  HEBDO
  MENSUEL
  ANNUEL
}

// // ------------------------------------
// // MODELE ENTREPRISE
// // ------------------------------------
// model Entreprise {
//   id         Int      @id @default(autoincrement())
//   nom        String
//   adresse    String?
//   ville      String?
//   codePostal String?
//   pays       String?
//   email      String?
//   telephone  String?
//   siret      String?  @unique
//   horaireId  Int?
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//
//   horaire  Horaire?   @relation(fields: [horaireId], references: [id])
//   sections Section[]
//   vacances Vacances[] @relation("EntrepriseVacances")
//
//   @@map("entreprises")
// }
//
// // ------------------------------------
// // MODELE SECTION / ANNEXE
// // ------------------------------------
// model Section {
//   id           Int      @id @default(autoincrement())
//   entrepriseId Int
//   nom          String
//   adresse      String?
//   ville        String?
//   codePostal   String?
//   pays         String?
//   email        String?
//   telephone    String?
//   horaireId    Int?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//
//   entreprise Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
//   horaire    Horaire?   @relation(fields: [horaireId], references: [id])
//   vacances   Vacances[] @relation("SectionVacances")
//
//   @@unique([entrepriseId, nom]) // emp√™che deux sections du m√™me nom dans une m√™me entreprise
//   @@index([entrepriseId])
//   @@map("sections")
// }
//
// // ------------------------------------
// // MODELE HORAIRE (r√©utilisable par entreprise ou section)
// // ------------------------------------
// model Horaire {
//   id        Int    @id @default(autoincrement())
//   ouverture String @default("07:00") // format HH:mm
//   fermeture String @default("18:00") // format HH:mm
//
//   entreprise Entreprise[]
//   section    Section[]
//
//   @@map("horaires")
// }
//
// // ------------------------------------
// // MODELE VACANCES (entreprise ou section)
// // ------------------------------------
// model Vacances {
//   id           Int      @id @default(autoincrement())
//   entrepriseId Int?
//   sectionId    Int?
//   debut        DateTime
//   fin          DateTime
//   description  String?
//
//   entreprise Entreprise? @relation("EntrepriseVacances", fields: [entrepriseId], references: [id], onDelete: Cascade)
//   section    Section?    @relation("SectionVacances", fields: [sectionId], references: [id], onDelete: Cascade)
//
//   @@unique([sectionId, debut, fin]) // emp√™che les doublons pour une m√™me section
//   @@index([entrepriseId])
//   @@index([sectionId])
//   @@map("vacances")
// }

// ------------------------------------
// MODELE ENTREPRISE
// ------------------------------------
model Entreprise {
  id         Int      @id @default(autoincrement())
  nom        String
  adresse    String?
  ville      String?
  codePostal String?
  pays       String?
  email      String?
  telephone  String?
  siret      String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sections Section[]
  vacances Vacances[] @relation("EntrepriseVacances")
  horaire  Horaire?   @relation("EntrepriseHoraire") // inverse relation

  @@map("entreprises")
}

// ------------------------------------
// MODELE SECTION / ANNEXE
// ------------------------------------
model Section {
  id           Int      @id @default(autoincrement())
  entrepriseId Int
  nom          String
  adresse      String?
  ville        String?
  codePostal   String?
  pays         String?
  email        String?
  telephone    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  entreprise Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  vacances   Vacances[] @relation("SectionVacances")
  horaire    Horaire?   @relation("SectionHoraire") // inverse relation

  @@unique([entrepriseId, nom])
  @@map("sections")
}

// ------------------------------------
// MODELE HORAIRE (one-to-one avec cascade)
// ------------------------------------
model Horaire {
  id        Int    @id @default(autoincrement())
  ouverture String @default("07:00")
  fermeture String @default("18:00")

  // FK pour cascade
  entrepriseId Int? @unique
  sectionId    Int? @unique

  // Relations avec cascade
  entreprise Entreprise? @relation("EntrepriseHoraire", fields: [entrepriseId], references: [id], onDelete: Cascade)
  section    Section?    @relation("SectionHoraire", fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("horaires")
}

// ------------------------------------
// MODELE VACANCES (one-to-many avec cascade)
// ------------------------------------
model Vacances {
  id           Int      @id @default(autoincrement())
  entrepriseId Int?
  sectionId    Int?
  debut        DateTime
  fin          DateTime
  description  String?

  entreprise Entreprise? @relation("EntrepriseVacances", fields: [entrepriseId], references: [id], onDelete: Cascade)
  section    Section?    @relation("SectionVacances", fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, debut, fin])
  @@map("vacances")
}
